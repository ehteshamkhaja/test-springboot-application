
name: 'Scan the code, Build and deploy the java containerized application'

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - 'manifests/**'
      - 'README.md'
  pull_request:

permissions:
  contents: read

jobs:

  gitleak-scan:

    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  sonarscan:
    
    needs: gitleak-scan

    runs-on: ubuntu-latest

    steps:
                      # sonar scan 
     - uses: actions/checkout@v3
       with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
     - name: Set up JDK 17
       uses: actions/setup-java@v3
       with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
     - name: Cache SonarCloud packages
       uses: actions/cache@v3
       with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
     - name: Cache Maven packages
       uses: actions/cache@v3
       with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
     - name: Build and analyze
       env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}  
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
       run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=sonarscan-project_sonarscan-project

         
  appbuild:

    needs: sonarscan

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
     
      - name: ECR login
        run:  aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin 210613553230.dkr.ecr.us-west-1.amazonaws.com
      

      - name: Build and Push Docker Image
        run: |
         docker build -t springboot-app-githubactions .
         docker tag springboot-app-githubactions:latest 210613553230.dkr.ecr.us-west-1.amazonaws.com/springboot-app-githubactions:latest
         docker push 210613553230.dkr.ecr.us-west-1.amazonaws.com/springboot-app-githubactions:latest

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: '210613553230.dkr.ecr.us-west-1.amazonaws.com/springboot-app-githubactions:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'LOW'
